# -*- coding: utf-8 -*-
"""Kruskal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zbsIcx37dfJROo68hwFch82NoV-GI6GG
"""

class Graph:

    def __init__(self,vertices):
        self.V=vertices #numero de vertices
        self.graph=[]#vetor vazio definido para armazenar as arestas entre vertices

    def addEdge(self, u, v, w):#recebe as arestas e os pesos
        self.graph.append([u,v,w])

    #função que permite encontrar qual conjunto um vertice pertence
    #obs: util para verificar se 2 elementos estão no mesmo conjunto
    def find(self, parent, i):
        if parent[i]==-1:
          return i
        if parent[i] !=-1:
          return self.find(parent, parent[i])

    #função que faz união entre dois conjuntos
    def union(self, parent, x, y):
        x_set=self.find(parent, x)
        y_set=self.find(parent, y)
        parent[x_set]=y_set
        print(parent)

    def KruskalMST(self):#começa aqui amanhã
       result=[] # vai retornar o resultado final, ele retorna a arvore geradora mínima

       i=0 #ordenar as arestas
       e=0 # auxiliar para contar arestas na arvore gerada (valos jogar no result)

       #passo 1 ordenação de todas as arestas em ordem crescente de peso
       self.graph = sorted(self.graph, key=lambda item:item[2])

       #vetor auxiliar chamado parent
       parent=[]

       #preenche o vetor parent com -1
       for node in range(self.V):
          parent.append(-1)

       while e < self.V-1:
          
          #passo 2 pega a aresta de menor peso e incrementa o indice i(para proxima aresta)
          u, v, w=self.graph[i]
          i=i+1

          #encontra de patriarca de cada vertice
          x=self.find(parent, u)
          y=self.find(parent, v)

          if x!=y:
             e=e+1
             result.append([u,v,w])
             self.union(parent, x, y)
          else:
             print('Aresta descartada: %s - %s x=y=%s' %(u,v,x))

          #passo 3 repete a iteração 2 até termos v-1 arestas na arvore spanning
       print("As seguintes arestas foram usadas na construção da MST")
       for u, v, w in result:
          print(' %s -- %s == %s' % (u, v, w))

g=Graph(5)

#A=0
g.addEdge(0,1,15)
g.addEdge(0,2,12)
g.addEdge(0,3,13)
g.addEdge(0,4,20)

#B=1
g.addEdge(1,2,16)
g.addEdge(1,3,15)
g.addEdge(1,4,5)

#C=2
g.addEdge(2,3,1)
g.addEdge(2,4,18)

#D=3
g.addEdge(3,4,17)

#E=4

g.KruskalMST()